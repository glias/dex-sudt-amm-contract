use share::ckb_std::error::SysError;
use share::error::HelperError;

/// Error
#[repr(i8)]
#[derive(Debug)]
pub enum Error {
    IndexOutOfBound = 1,
    ItemMissing,
    LengthNotEnough,
    Encoding,
    MissingTypeScript,
    YExchangeXFailed,
    XExchangeYFailed,
    InvalidChangeCell,
    InvalidTotalLiquidity,
    InvalidSUDTXReserve,
    InvalidSUDTYReserve,
    PoolTypeHashMismatch,
    InfoTypeHashMismatch,
    InfoCreationCellLockHashMismatch,
    LiquidityArgsInfoTypeHashMismatch,
    InfoCapacityDiff,
    MoreThanOneInfoCell,
    InvalidPoolInCapacity,
    InvalidInfoInData,
    LiquiditySUDTTypeHashMismatch = 40,
    AddLiquiditySUDTOutLockHashMismatch,
    InvalidMinCkbInject,
    InvalidMinSUDTInject,
    InvalidMinCkbGot,
    InvalidMinSUDTGot = 45,
    InvalidInfoTypeArgsLen,
    InputCellMoreThanOne,
    AddLiquidityCkbOutLockHashMismatch,
    SUDTCellDataLenTooShort,
    CKBCellDataIsNotEmpty = 50,
    InvalidOutputLockHash,
    RequestCapcityEqSUDTCapcity,
    InvalidOutputTypeHash,
    InvalidSwapOutputCapacity,
    InvalidPoolOutputData,
    NoInfoCellInDeps,
    SameSUDTInPair,
    InvalidLockScriptHashType,
    InvalidInfoCellDepsCount,
    PoolXAmountDiff,
    PoolYAmountDiff,
    InfoCellTypeHashDiff,
    InfoCellLockHashDiff,
    InvalidPoolOutCapacity,
    InvalidPoolInLockHash,
    InvalidPoolOutLockHash,
    PoolCellTypeHashDiff,
    PoolCellLockHashDiff,
    InvalidSUDTXTypeHash,
    InvalidSUDTYTypeHash,
    InvalidLiquidityReqLockArgsInfoTypeHash,
    InvalidLiquidityReqLockArgsUserLockHash,
    UserLockHashDiff,
    InvalidReqSUDTXLockHash,
    InvalidLpCapacity,
    InvalidLpDataLen,
    InvalidLpLockHash,
    InvalidLpTypeHash,
    InvalidLpAmount,
    InvalidCKBChangeData,
    InvalidCKBChangeType,
    InvalidCKBChangeLockHash,
    InvalidCKBChangeCapacity,
    InvalidSwapReqTypeHash,
    InvalidSwapReqDataLen,
    InvalidSwapReqLockArgsTypeHash,
    InvalidSwapReqLockArgsMinAmount,
    InvalidSUDTOutTypeHash,
    InvalidSUDTOutCapacity,
    InvalidSUDTOutLockHash,
    TotalLiquidityIsZero,
    InvalidLiquidityReqXTypeHash,
    InvalidLiquidityReqYTypeHash,
    InvalidLiquidityReqXDataLen,
    InvalidLiquidityReqYDataLen,
    InvalidLiquidityReqXLockHash,
    InvalidLiquidityReqYLockHash,
    InvalidLiquidityReqYLockArgsXLockHash,
    InvalidSUDTCapacity,
    InvalidSUDTDataLen,
    InvalidSUDTChangeTypeHash,
    InvalidSUDTLockHash,
    InvalidXAmountMin,
    InvalidYAmountMin,
    InvalidLiquidityAmount,
    InvalidRemoveLpCapacity,
    InvalidRemoveLpDataLen,
    InvalidRemoveLpTypeHash,
    InvalidRemoveLpLockHash,
    InvalidXAmountOut,
    InvalidYAmountOut,
    InvalidXAmountOutMin,
    InvalidYAmountOutMin,
}

impl From<SysError> for Error {
    fn from(err: SysError) -> Self {
        use SysError::*;
        match err {
            IndexOutOfBound => Self::IndexOutOfBound,
            ItemMissing => Self::ItemMissing,
            LengthNotEnough(_) => Self::LengthNotEnough,
            Encoding => Self::Encoding,
            Unknown(err_code) => panic!("unexpected sys error {}", err_code),
        }
    }
}

impl From<HelperError> for Error {
    fn from(err: HelperError) -> Self {
        match err {
            HelperError::MissingTypeScript => Self::MissingTypeScript,
        }
    }
}
