//! Generated by capsule
//!
//! `main.rs` is used to define rust lang items and modules.
//! See `entry.rs` for the `main` function.
//! See `error.rs` for the `Error` type.

#![no_std]
#![no_main]
#![feature(lang_items)]
#![feature(alloc_error_handler)]
#![feature(panic_info_message)]

mod error;

use alloc::vec::Vec;
use core::result::Result;

use num_bigint::BigUint;
use share::ckb_std::{
    self,
    ckb_constants::Source,
    ckb_types::prelude::*,
    default_alloc,
    high_level::{
        load_cell, load_cell_data, load_cell_lock_hash, load_script, load_script_hash,
        load_witness_args, QueryIter,
    },
};
use share::{cell::SwapRequestLockArgs, decode_u128, get_cell_type_hash};

use crate::error::Error;

const SUDT_CAPACITY: u64 = 14_200_000_000;

// Alloc 4K fast HEAP + 2M HEAP to receives PrefilledData
default_alloc!(4 * 1024, 2048 * 1024, 64);

ckb_std::entry!(program_entry);

/// program entry
fn program_entry() -> i8 {
    // Call main function and return error code
    match main() {
        Ok(_) => 0,
        Err(err) => err as i8,
    }
}

fn main() -> Result<(), Error> {
    let script_args: Vec<u8> = load_script()?.args().unpack();

    // Cancel request
    for (idx, lock_hash) in QueryIter::new(load_cell_lock_hash, Source::Input).enumerate() {
        if lock_hash == script_args[32..64]
            && load_witness_args(idx, Source::Input)?.total_size() != 0
        {
            return Ok(());
        }
    }

    let self_hash = load_script_hash()?;
    let req_lock_args = SwapRequestLockArgs::from_raw(&script_args)?;

    for abs_idx in QueryIter::new(load_cell_lock_hash, Source::Input)
        .enumerate()
        .filter_map(|(idx, hash)| {
            if hash == self_hash {
                Some(idx - 4)
            } else {
                None
            }
        })
    {
        let input_idx = 4 + abs_idx;
        let output_idx = 4 + abs_idx * 2;

        let req_cell = load_cell(input_idx, Source::Input)?;
        let output_sudt_cell = load_cell(output_idx, Source::Output)?;
        let output_ckb_cell = load_cell(output_idx + 1, Source::Output)?;

        if load_cell_lock_hash(output_idx, Source::Output)? != req_lock_args.user_lock_hash {
            return Err(Error::InvalidOutputLockHash);
        }
    }

    Ok(())
}
